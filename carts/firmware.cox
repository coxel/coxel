let code = "";

function addChMap(map, list, val) {
  for (let i = 0; i < list.length; i++)
    map[list[i]] = val;
}

function makeChMap(list, val) {
  let map = {};
  addChMap(map, list, val);
  return map;
}

let kws = [
  "break",
  "case",
  "continue",
  "default",
  "do",
  "else",
  "false",
  "for",
  "function",
  "if",
  "in",
  "let",
  "null",
  "of",
  "return",
  "switch",
  "this",
  "true",
  "undefined",
  "while",
];
let kwSet = makeChMap(kws, true);

let tokEnd, tokColor;
function initParse(pr) {
  if (pr.token == "comment")
    tokColor = 4;
  else if (pr.token == "string")
    tokColor = 5;
  else
    tokColor = 14;
  tokEnd = pr.tokenEnd;
}
let abet = "abcdefghijklmnopqrstuvwxyz";
abet += "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
let nums = "0123456789";
let symbs = "!%&()*+,-.:;<=>?[]^{|}~";
let tokFuncs = {};
let identSet = makeChMap(
  "_$" + abet + nums, true);
let numSet = makeChMap(nums, true);
let baseSet = {
  "b": makeChMap("01", true),
  "o": makeChMap("01234567", true),
  "x": makeChMap(
    "0123456789abcdefABCDEF", true)
};
let escSet = makeChMap("n'\"\\", true);
let tokIdent = function(c) {
  let t = c + 1;
  for (; identSet[code[t]]; t++);
  if (kwSet[code.substr(c, t-c)])
    tokColor = 6;
  else
    tokColor = 14;
  tokEnd = t;
};
addChMap(tokFuncs, abet, tokIdent);
addChMap(tokFuncs, "_$", tokIdent);
let tokNumber = function (c) {
  let t = c + 1;
  let digitSet = numSet;
  if (code[c] == "0") {
    digitSet = baseSet[code[t]];
    if (digitSet)
      t++;
    else
      digitSet = baseSet.o;
  }
  for (; digitSet[code[t]]; t++);
  tokColor = 10;
  tokEnd = t;
};
addChMap(tokFuncs, nums, tokNumber);
let tokSymbol = function (c) {
  tokColor = 15;
  tokEnd = c + 1;
};
addChMap(tokFuncs, symbs, tokSymbol);
let tokString = function (c) {
  let q = code[c++];
  while (true) {
    if (code[c] == "\\") {
      if (escSet[code[c + 1]])
        c += 2;
      else
        break;
    }
    else if (code[c] == q
      || code[c] == "\n"
      || code[c] == undefined) {
      c++;
      break;
    }
    else
      c++;
  }
  tokColor = 5;
  tokEnd = c;
};
addChMap(tokFuncs, "'\"", tokString);
let tokComment = function (c) {
  c++;
  if (code[c] == "/") {
    for (c++;;c++) {
      let ch = code[c];
      if (ch == "\n" || ch == undefined)
        break;
    }
    tokColor = 4;
    tokEnd = c;
  }
  else if (code[c] == "*") {
    tokColor = 4;
    for (c++;;c++) {
      let ch = code[c];
      if (ch == undefined) {
        tokEnd = c;
        break;
      }
      if (code[c]=="*"&&code[c+1]=="/"){
        tokEnd = c + 2;
        break;
      }
    }
  }
  else {
    tokColor = 15;
    tokEnd = c;
  }
};
addChMap(tokFuncs, "/", tokComment);

function nextTok(c) {
  let ch = code[c];
  let func = tokFuncs[ch];
  if (func)
    func(c);
  else {
    tokColor = 14;
    tokEnd = c + 1;
  }
};

// Selection begin/end
let cbeg = 0, cend = 0;
// Effective X position
let ex = 0;
// View X/Y position
let vx = 0, vy = 0;

let blinkTimer = 0;

function umin(a, b) {
  return min(a, b);
}

function umax(a, b) {
  return max(a, b);
}

function updateX(tx) {
  let l = code.lastIndexOf("\n", cend - 1);
  let rx = l == -1 ? cend : cend - l - 1;
  if (tx == undefined)
    ex = rx;
  else
    ex = tx;
  vx = umin(vx, rx);
  vx = umax(vx, rx - 39); /* TODO: u */
  return rx;
}

function updateY() {
  let c = cend;
  let y = -1;
  while (c != -1) {
    c = code.lastIndexOf("\n", c - 1);
    ++y;
  }
  vy = umin(vy, y);
  vy = umax(vy, y - 17); /* TODO: u */
  return y;
}

function redo() {
}

function undo() {
}

function findLine(line) {
  return dev_fastParse(code, line)
    .lineStart;
}

function drawCode() {
  let pr = dev_fastParse(code, vy);
  let c = pr.lineStart;
  initParse(pr);
  let beg = umin(cbeg, cend);
  let end = umax(cbeg, cend);
  let cx = 1, cy = 9;
  let x = 0;
  fillRect(0, 8, 160, 128, 8);
  camera(vx * 4, 0);
  for (;; c++) {
    let insel = beg <= c && c < end;
    if (insel)
      fillRect(cx-1,cy-1,4,7);
    if (c == cend) {
      if (blinkTimer < 30)
        line(cx-1,cy-1,cx-1,cy+5);
      else
        line(cx-1,cy-1,cx-1,cy+5,8);
    }
    if (c == code.length)
      break;
    if (c >= tokEnd)
      nextTok(c);
    let ch = code[c];
    if (ch == "\n") {
      cy += 7;
      cx = 1;
      x = 0;
      if (cy >= 144)
        break;
    }
    else {
      print(ch,cx,cy,insel?0:tokColor);
      cx += 4;
    }
  }
  camera();
}

function statPos(x, y) {
  stat((y + 1) + "," + (x + 1));
}

function insert(text) {
  let beg = umin(cbeg, cend);
  let end = umax(cbeg, cend);
  code = code.substr(0, beg)
    + text
    + code.substr(end);
  cbeg = cend = beg + text.length;
  let x = updateX();
  let y = updateY();
  blinkTimer = 0;
  statPos(x, y);
}

function move(c, tx) {
  c = umin(c, code.length);
  c = umax(c, 0);
  if (dev_key("shift"))
    cend = c;
  else
    cbeg = cend = c;
  let x = updateX(tx);
  let y = updateY();
  blinkTimer = 0;
  statPos(x, y);
}

function upRows(rows) {
  rows++;
  let p = cend;
  for (; p != -1 && rows != 0; --rows)
    p = code.lastIndexOf("\n", p - 1);
  ++p;
  let np = code.indexOf("\n", p);
  if (np == -1)
    np = code.length;
  move(p + umin(np - p, ex), ex);
}

function downRows(rows) {
  if (code.length == 0)
    return;
  let p = code.lastIndexOf("\n", cend - 1) + 1;
  for (; rows != 0; --rows) {
    let t = code.indexOf("\n", p);
    if (t == -1)
      break;
    else
      p = t + 1;
  }
  let np = code.indexOf("\n", p);
  if (np == -1)
    np = code.length;
  move(p + umin(np - p, ex), ex);
}

let findText = "";
function findNext() {
  let p = code.indexOf(findText, cend);
  if (p == -1)
    p = code.indexOf(findText);
  if (p != -1) {
    move(p + findText.length);
    cbeg = p;
  }
}

function find() {
  statInput("Find:", function(text) {
    if (text == undefined)
      return;
    findText = text;
    if (text == "")
      return;
    findNext();
  }, findText);
}

function goto() {
  statInput("Goto line:", function(t) {
    if (t == "" || t == undefined)
      return;
    let line = t >>> 0;
    if (line == 0)
      return;
    let c = findLine(line - 1);
    move(c);
    cbeg = cend;
  }, "", function(c) {
    return c >= "0" && c <= "9";
  });
}

function getIndent(p) {
  let s = 1 + code.lastIndexOf("\n", p);
  let ret = 0;
  for (let i = s; i<code.length; i++) {
    if (code[i] == " ")
      ret++;
    else
      break;
  }
  return ret;
}

function onframe_codeEditor() {
  cls();
  let input = dev_input();
  if (input)
    insert(input);
  else if (dev_keyp("tab")) {
    if (dev_key("ctrl"))
      onframe = onframe_spriteEditor;
    else
      insert("  ");
  }
  else if (dev_keyp("return")) {
    insert("\n");
    let indent = getIndent(cend - 2);
    let t = "";
    for (let i = 0; i < indent; i++)
      t += " ";
    insert(t);
  }
  else if (dev_keyp("backspace")) {
    if (cbeg == cend && cbeg != 0)
      cbeg--;
    insert("");
  }
  else if (dev_keyp("delete")) {
    if (cbeg == cend && cend != code.length)
      cend++;
    insert("");
  }
  else if (dev_keyp("left"))
    move(cend - 1);
  else if (dev_keyp("right"))
    move(cend + 1);
  else if (dev_keyp("up"))
    upRows(1);
  else if (dev_keyp("down"))
    downRows(1);
  else if (dev_keyp("pgup"))
    upRows(18);
  else if (dev_keyp("pgdn"))
    downRows(18);
  else if (dev_keyp("home")) {
    if (dev_key("ctrl"))
      move(0);
    else {
      let p = code.lastIndexOf("\n",
        cend - 1);
      move(p == -1 ? 0 : p + 1);
    }
  }
  else if (dev_keyp("end")) {
    if (dev_key("ctrl"))
      move(code.length);
    else {
      let p = code.indexOf("\n", cend);
      move(p == -1 ? code.length : p);
    }
  }
  else if (dev_keyp("f3")) {
    if (findText)
      findNext();
    else
      find();
  }
  else if (dev_key("ctrl")) {
    // Ctrl- shortcuts
    if (dev_keyp("a"))
      cbeg = 0, cend = code.length;
    else if (dev_keyp("c")
        || dev_keyp("x")) {
      let beg = umin(cbeg, cend);
      let end = umax(cbeg, cend);
      let sel = code.substr(beg, end - beg);
      dev_copy(sel);
      if (dev_keyp("x"))
        insert("");
    }
    else if (dev_keyp("v")) {
      let p = dev_paste();
      insert(p);
    }
    else if (dev_keyp("f"))
      find();
    else if (dev_keyp("g"))
      goto();
    else if (dev_keyp("y"))
      redo();
    else if (dev_keyp("z")) {
      if (dev_key("shift"))
        redo();
      else
        undo();
    }
  }
  blinkTimer = (blinkTimer + 1) % 60;

//  print("ex:"+ex, 100, 100);
//  print("vx:"+vx, 100, 107);
//  print("vy:"+vy, 100, 114);
//  print("cbeg:"+cbeg, 100, 121);
//  print("cend:"+cend, 100, 128);
  drawCode();
  drawToolbar();
}

let sprite = dev_newbuf(8192);
let color = 0;
let mcpos = { x:-1, y:-1 };
let sprPickerState = {};

function scrollBar(x,y,w,h,n,dir,state){
  let mpos = dev_mpos();
  if (state.scrl == undefined) {
    state.scrl = 0;
    state.mcscrl = 0;
  }
  let l = dir == "vert" ? h : w;
  let step = max(1, floor(l / n) - 2);
  let bar = l - n * step;
  fillRect(x, y, w, h, 4);
  let dc = 9;
  if (mpos.x >= x && mpos.x < x+w
    && mpos.y >= y && mpos.y < y+h) {
    let clicked = false;
    if (dir == "vert"
      && mpos.y>=y+step*state.scrl
      && mpos.y<y+bar+step*state.scrl)
      clicked = true;
    if (dir == "hori"
      && mpos.x>=x+step*state.scrl
      && mpos.x<x+bar+step*state.scrl)
      clicked = true;
    if (clicked) {
      dc = 10;
      if (dev_keyp("mleft"))
        state.mcscrl = state.scrl;
    }
  }
  if (dev_key("mleft")
    && mcpos.x >= x && mcpos.x < x+w
    && mcpos.y >= y && mcpos.y < y+h) {
    let dist;
    if (dir == "vert")
      dist = mpos.y - mcpos.y;
    else
      dist = mpos.x - mcpos.x;
    state.scrl = floor(dist / step)
      + state.mcscrl;
    state.scrl = max(0,
      min(state.scrl, n));
    dc = 9;
  }
  if (dir == "vert") {
    fillRect(x, y+step*state.scrl, 
      w, bar, dc);
  }
  else {
    fillRect(x+step*state.scrl, y,
      bar, h, dc);
  }
}

function spritePicker(x, y, h, state) {
  if (!state.init) {
    state.sprId = 0;
    state.sprSize = 8;
    state.firstp = 0;
    state.init = true;
  }
  let mpos = dev_mpos();
  scrollBar(x+64,y,4,128,16,"vert",state);

  // Draw sprite sheet picker
  let VMEM_ = VMEM;
  let sprite_ = sprite;
  let p = state.scrl * 8 * 32;
  for (let i = 0; i < h; i++) {
    let vp = ((y + i) * 160 + x) / 2;
    for (let j = 0; j < 64; j += 2)
      VMEM_[vp++] = sprite_[p++];
  }
  if (dev_mwheel() != 0) {
    let wheel = dev_mwheel();
    if (wheel > 0) {
      wheel = min(wheel, 4);
      state.sprSize = min(64,
        state.sprSize << wheel);
    }
    else {
      wheel = min(-wheel, 4);
      state.sprSize = max(8,
        state.sprSize >> wheel);
    }
  }
  if (dev_key("mleft")
    && mcpos.x>=x && mcpos.x<x+64
    && mcpos.y>=y && mcpos.y<y+h
    && mpos.x>=x && mpos.x<x+64
    && mpos.y>=y && mpos.y<y+h) {
    let id = floor((mpos.x-x)/8)
      + 8*floor((mpos.y-y)/8);
    state.sprId = state.scrl * 8 + id;
  }
  state.sprId =
    min(state.sprId & -8,
      256 - state.sprSize)
    + min(state.sprId % 8,
      (64 - state.sprSize) / 8);
  let row = floor(state.sprId / 8);
  let col = state.sprId % 8;
  // First pixel position in buffer
  state.firstp = (row*512+col*8)>>1;
  row -= state.scrl;
  rect(x + col * 8, y + row * 8,
    state.sprSize, state.sprSize, 15);
}

function onframe_spriteEditor() {
  let mpos = dev_mpos();
  if (dev_keyp("mleft"))
    mcpos = mpos;
  if (dev_key("ctrl") & dev_keyp("tab"))
    onframe = onframe_assetEditor;

  cls();
  fillRect(0, 8, 160, 128, 8);
  
  let s = sprPickerState;
  spritePicker(0, 8, 128, s);
  
  let firstp = s.firstp;
  
  // Draw canvas
  let VMEM_ = VMEM;
  let sprite_ = sprite;
  let ps = 64 / s.sprSize;
  rect(79,17,66,66,0);
  if (ps == 1) {
    for (let i = 0; i < 64; i++) {
      let p = firstp + i * 64 / 2;
      let vp = ((18+i)*160+80) / 2;
      for (let j = 0; j < 64; j += 2)
        VMEM_[vp++] = sprite_[p++];
    }
  }
  else {
    let fillRect_ = fillRect;
    for (let i = 0; i < 64; i+=ps) {
      let p = firstp + floor(i/ps)*32;
      for (let j = 0; j < 64; j+=2*ps) {
        let d = sprite_[p++];
        fillRect_(80 + j, 18 + i,
          ps, ps, d & 15);
        fillRect_(80 + j + ps, 18 + i,
          ps, ps, d >> 4);
      }
    }
  }
  // Draw helpers
  let setPixel = function(x,y,c) {
    let p = firstp+floor(y*32+floor(x/2));
    if (x % 2 == 0)
      sprite[p]=(sprite[p]&0xF0)+c;
    else
      sprite[p]=(sprite[p]&0xF)+c*16;
  };
  if (dev_key("mleft")
    && mcpos.x>=80 && mcpos.x<144
    && mcpos.y>=18 && mcpos.y<82
    && mpos.x>=80 && mpos.x<144
    && mpos.y>=18 && mpos.y<82) {
    let x = floor((mpos.x - 80) / ps);
    let y = floor((mpos.y - 18) / ps);
    setPixel(x, y, color);
  }

  // Draw tools
  let cset = [ 14, 6, 15];
  iconBtn(8, 90, 84, cset);
  iconBtn(9, 98, 84, cset);

  // Draw color picker
  rect(119, 95, 34, 34, 0);
  for (let i = 0; i < 4; i++) {
    for (let j = 0; j < 4; j++) {
      fillRect(120+j*8,96+i*8,8,8,i*4+j);
      if (dev_keyp("mleft")
        && mpos.x >= 120+j*8
        && mpos.y >= 96+i*8
        && mpos.x < 128+j*8
        && mpos.y < 104+i*8)
        color = i*4+j;
    }
  }
  rect(120+(color%4)*8,
    96+floor(color/4)*8,8,8,0);
  rect(119+(color%4)*8,
    95+floor(color/4)*8,10,10,15);

  stat(s.sprId + "  "
    + s.sprSize + "x" + s.sprSize);
  drawToolbar();
}

let asset = [];
let curAsset = 0;
function onframe_assetEditor() {
  let mpos = dev_mpos();
  if (dev_keyp("mleft"))
    mcpos = mpos;
  if (dev_key("ctrl") && dev_keyp("tab"))
    onframe = onframe_codeEditor;
  cls();
  if (asset.length == 0)
    fillRect(0, 8, 84, 8, 4);
  else {
    fillRect(0, 8, 84, 8, 8);
    print(asset[curAsset].name,1,9,0);
  }
  iconBtn(23, 84, 8, null, newAsset);
  if (asset.length) {
    switch (asset[curAsset].type) {
    case "map": mapEditor(); break;
    }
  }
  drawToolbar();
}

function newAsset() {
  let old = onframe;
  let items = [
  { icon: 16, name: "Text",
  f: function(obj) {
    obj.type = "text";
  }},
  { icon: 17, name: "Map",
  f: function(obj) {
    obj.type = "map";
    obj.width = 8;
    obj.height = 8;
    obj.data = dev_newbuf(
      obj.width * obj.height);
  }},
  { icon: 18, name: "Music",
  f: function(obj) {
    obj.type = "music";
  }}];
  let select = function(i) {
    onframe = old;
    statInput(items[i].name + " Name:",
      function(name) {
      if (name) {
        for (let a of asset)
          if (a.name == name) {
            stat(name+" already exists");
            return;
          }
        let obj = {};
        obj.name = name;
        items[i].f(obj);
        asset.push(obj);
      }
      else
        stat("Cancelled");
    });
  };
  let sel = 0;
  onframe = function() {
    let len = items.length;
    let x = 10;
    let y = 30;
    let w = 60;
    let h = 8;
    if (dev_keyp("up"))
      sel = max(0, sel - 1);
    else if (dev_keyp("down"))
      sel = min(items.length-1, sel+1);
    else if (dev_keyp("return"))
      select(sel);
    fillRect(x, y, w, h * len, 4);
    fillRect(x, y + sel * h, w, h, 5);
    let mpos = dev_mpos();
    for (let i = 0; i < len; i++) {
      if (mpos.x >= x && mpos.x < x + w
        && mpos.y >= y + i * h
        && mpos.y < y + (i + 1) * h) {
        pal(15, 6);
        if (dev_keyp("mleft"))
          select(i);
      }
      spr(items[i].icon, x, y+i*h);
      print(items[i].name, x+8,2+y+i*h);
      pal();
    }
    drawToolbar();
  };
}

let mapSpritePickerState = {};
let mapVS = {}, mapHS = {};
function mapEditor() {
  let mpos = dev_mpos();
  let s = mapSpritePickerState;
  spritePicker(92, 8, 128, s);
  let w = 88, h = 108;
  let wn = ceil(w / 8);
  let hn = ceil(h / 8);
  let map = asset[curAsset];
  let xn = map.width - wn;
  let yn = map.height - hn;
  scrollBar(88,24,4,102,yn,"vert",mapVS);
  scrollBar(0,132,85,4,xn,"hori",mapHS);
  let endy = 132;
  let x0 = mapHS.scrl, y0 = mapVS.scrl;
  let ax = 0, ay = 24;
  let VMEM_ = VMEM;
  let sprite_ = sprite;
  hn = min(hn, map.height);
  wn = min(wn, map.width);
  for (let y = 0; y < hn; y++) {
    let ycnt = min(8, (endy-ay-y*8));
    for (let x = 0; x < wn; x++) {
      let t = map.data[(y0+y)*map.width
        + (x0 + x)];
      if (t == 0)
        continue;
      let p = (ay+y*8)*80 + (ax+x)*4;
      let sp = floor(t / 8) * 8 * 32
        + t % 8 * 4;
      for (let i = 0; i < ycnt; i++) {
        VMEM_[p + 0] = sprite_[sp + 0];
        VMEM_[p + 1] = sprite_[sp + 1];
        VMEM_[p + 2] = sprite_[sp + 2];
        VMEM_[p + 3] = sprite_[sp + 3];
        p += 80;
        sp += 32;
      }
    }
  }
  if (dev_key("mleft")
    && mcpos.x>=ax && mcpos.x<ax+8*wn
    && mcpos.y>=ay && mcpos.y<ay+8*hn) {
    let x = floor((mpos.x - ax) / 8);
    let y = floor((mpos.y - ay) / 8);
    if (x>=0 && x<wn && y>=0 && y<hn) {
      x += x0, y += y0;
      map.data[y*map.width+x] = s.sprId;
    }
  }
  fillRect(0, 16, 92, 8, 14);
  iconBtn(28, 0, 16, null, function() {
    let dir = "";
    let resize = function(tw, th,
      sx, sy, tx, ty, cw, ch) {
      let w = map.width, h = map.height;
      let ndata = dev_newbuf(tw * th);
      let data = map.data;
      for (let i = 0; i < ch; i++) {
        let s = (sy + i) * w + sx;
        let t = (ty + i) * tw + tx;
        for (let j = 0; j < cw; j++)
          ndata[t++] = data[s++];
      }
      map.width = tw;
      map.height = th;
      map.data = ndata;
    };
    let incFunc = function() {
      let w = map.width, h = map.height;
      switch (dir) {
      case "left":
        resize(w+1,h,0,0,1,0,w,h);
        break;
      case "down":
        resize(w,h+1,0,0,0,0,w,h);
        break;
      case "right":
        resize(w+1,h,0,0,0,0,w,h);
        break;
      case "up":
        resize(w,h+1,0,0,0,1,w,h);
        break;
      }
    };
    let decFunc = function() {
      let w = map.width, h = map.height;
      switch (dir) {
      case "left":
        if (w > 1)
          resize(w-1,h,1,0,0,0,w-1,h);
        break;
      case "down":
        if (h > 1)
          resize(w,h-1,0,0,0,0,w,h-1);
        break;
      case "right":
        if (w > 1)
          resize(w-1,h,0,0,0,0,w-1,h);
        break;
      case "up":
        if (h > 1)
          resize(w,h-1,0,1,0,0,w,h-1);
        break;
      }
    };
    onframe = function() {
      fillRect(10, 50, 70, 50, 4);
      if (btnp("left"))
        dir = "left";
      iconBtn(27,10,70,null,function(){
        dir = "left";
      }, dir == "left");
      if (btnp("down"))
        dir = "down";
      iconBtn(26,20,80,null,function(){
        dir = "down";
      }, dir == "down");
      if (btnp("right"))
        dir = "right";
      iconBtn(25,30,70,null,function(){
        dir = "right";
      }, dir == "right");
      if (btnp("up"))
        dir = "up";
      iconBtn(24,20,60,null,function(){
        dir = "up";
      }, dir == "up");
      iconBtn(22,50,70,null,decFunc);
      iconBtn(23,60,70,null,incFunc);
      if (btnp("a"))
        incFunc();
      if (btnp("b"))
        decFunc();
      iconBtn(21,70,50,null,function(){
        onframe = onframe_assetEditor;
      });
      if (btnp("x"))
        onframe = onframe_assetEditor;
      print(map.width+"x"+map.height,
        50, 60);
    };
  });
}

function getCart() {
  return {
    code: code,
    sprite: sprite,
    asset: asset,
  };
}

function iconBtn(id,x,y,cset,f,sel) {
  let pos = dev_mpos();
  if (!cset)
    cset = [15, 7, 6];
  let c = cset[0];
  if (sel)
    c = cset[2];
  if (pos.x >= x && pos.y >= y
    && pos.x < x+8 && pos.y < y+8) {
    c = cset[1];
    if (dev_key("mleft"))
      c = cset[2];
    if (dev_keyp("mleft") && f)
      f();
  }
  pal(15, c);
  spr(id, x, y);
  pal();
}

let filename;
let statMsg = "";
let statColor = 0;
function drawToolbar() {
  if (dev_key("ctrl") && dev_keyp("r")
    || dev_keyp("f5")) {
    let cart = getCart();
    let res = dev_run(cart);
    statRes(res);
  }
  else if (dev_key("ctrl") && dev_keyp("s")) {
    if (filename) {
      let res=dev_save(filename, getCart());
      if (res.err)
        statRes(res);
      else
        stat("File saved.");
    }
    else {
      statInput("Filename:",
        function(fn) {
          if (fn) {
            let res=dev_save(fn,getCart());
            if (res.err)
              statRes(res);
            else {
              filename = fn;
              stat("File saved.");
            }
          }
          else
            stat("Cancelled.");
        }
      );
    }
  }
  else if (dev_key("ctrl") && dev_keyp("l")) {
    statInput("Filename:",
      function(fn) {
        if (fn) {
          let res = dev_load(fn);
          if (res.err)
            statRes(res);
          else {
            filename = fn;
            code = res.code;
            cbeg=cend=ex=vx=vy=0;
            if (res.sprite)
              sprite = res.sprite;
            else
              sprite = dev_newbuf(8192);
            if (res.asset)
              asset = res.asset;
            else
              asset = [];
            curAsset = 0;
          }
        }
      }
    );
  }
  fillRect(0, 0, 160, 8, 14);
  fillRect(0, 136, 160, 8, 14);
  iconBtn(0, 0, 0, null, function() {
    onframe = onframe_codeEditor;
  }, onframe == onframe_codeEditor);
  iconBtn(1, 8, 0, null, function() {
    onframe = onframe_spriteEditor;
  }, onframe == onframe_spriteEditor);
  iconBtn(2, 16, 0, null, function() {
    onframe = onframe_assetEditor;
  }, onframe == onframe_assetEditor);
  if (statMsg != "")
    print(statMsg,1,138,statColor);
  print(statCpu(),136,138,statColor);
}

function stat(msg, c) {
  statMsg = msg;
  statColor = c ? c : 0;
}

function statRes(res) {
  if (res.err) {
    if (res.line != -1) {
      onframe = onframe_codeEditor;
      move(findLine(res.line));
      cbeg = cend;
    }
    stat(res.err, 2);
  }
}

function statInput(prompt, f, text, v) {
  if (text == undefined)
    text = "";
  if (v == undefined)
    v = function(ch) { return true; };
  let old = onframe;
  let blinkTimer = 0;
  let sbeg = 0;
  let send = text.length;
  let move = function(x) {
    if (dev_key("shift"))
      send = x;
    else
      sbeg = send = x;
    blinkTimer = 0;
  };
  let insert = function(t) {
    let vt = "";
    for (let i = 0; i < t.length; i++)
      if (v(t[i]))
        vt += t[i];
    let l = min(sbeg, send);
    let r = max(sbeg, send);
    text = text.substr(0, l)
      + vt + text.substr(r);
    sbeg = send = l + vt.length;
    blinkTimer = 0;
  };
  onframe = function() {
    fillRect(0, 136, 160, 8, 15);
    print(prompt, 1, 138, 2);
    let l = min(sbeg, send);
    let r = max(sbeg, send);
    let x = 1 + prompt.length * 4;
    print(text.substr(0,l),x,138,9);
    x += l * 4;
    fillRect(x,137,(r-l)*4,7,8);
    print(text.substr(l,r-l),x,138,7);
    x += (r - l) * 4;
    print(text.substr(r),x,138,9);
    if (blinkTimer < 30) {
      let x = (prompt.length+send)*4;
      line(x, 137, x, 143, 9);
    }
    blinkTimer = (blinkTimer + 1) % 60;

    let input = dev_input();
    if (input)
      insert(input);
    else if (dev_keyp("backspace")) {
      if (sbeg != send)
        insert("");
      else if (send > 0) {
        sbeg--;
        insert("");
      }
    }
    else if (dev_keyp("delete")) {
      if (sbeg != send)
        insert("");
      else if (send < text.length) {
        sbeg++;
        insert("");
      }
    }
    else if (dev_keyp("left"))
      move(max(0, send - 1));
    else if (dev_keyp("right"))
      move(min(send + 1, text.length));
    else if (dev_keyp("home"))
      move(0);
    else if (dev_keyp("end"))
      move(text.length);
    else if (dev_keyp("esc")) {
      f();
      onframe = old;
    }
    else if (dev_keyp("return")) {
      f(text);
      onframe = old;
    }
    else if (dev_key("ctrl")) {
      if (dev_keyp("a")) {
        sbeg = 0;
        send = text.length;
      }
      else if (dev_keyp("c")) {
        let l = min(sbeg, send);
        let r = max(sbeg, send);
        dev_copy(text.substr(l, r - l));
      }
      else if (dev_keyp("v"))
        insert(dev_paste());
    }
  };
}

onframe = onframe_codeEditor;

	>sprites
0000000000000000000000000000000000000000000000000000000000000000
00f00f0000ffff000ff0fff00000000000000000000000000000000000000000
0f0000f00ff00ff00ff0fff00000000000000000000000000000000000000000
0f0000f00f0000f0000000000000000000000000000000000000000000000000
0f0000f000ffff000ff0fff00000000000000000000000000000000000000000
0f0000f00ff00ff00ff0fff00000000000000000000000000000000000000000
00f00f0000f00f000ff0fff00000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000f00000f00000000000000000000000000000000000000000000000000000
000fff000f0f0000000000000000000000000000000000000000000000000000
00fffff0f000f000000000000000000000000000000000000000000000000000
0fffff000f000f00000000000000000000000000000000000000000000000000
f0fff00000fffff0000000000000000000000000000000000000000000000000
f00f0000f00fff00000000000000000000000000000000000000000000000000
fff00000f000f000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0ffffff00f0ff0f000fffff000000000000000000f0000f000000000000ff000
0ffffff00000000000f000f0000000000000000000f00f0000000000000ff000
000ff0000f0ff0f000f000f00000000000000000000ff0000ffffff00ffffff0
000ff0000f0ff0f000f000f00000000000000000000ff0000ffffff00ffffff0
000ff000000000000ff00ff0000000000000000000f00f0000000000000ff000
000ff0000f0ff0f00ff00ff000000000000000000f0000f000000000000ff000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
000ff0000000f000000ff000000f00000f0000f0000000000000000000000000
00ffff000000ff00000ff00000ff00000f0ff0f0000000000000000000000000
0ffffff00ffffff0000ff0000ffffff00ff00ff0000000000000000000000000
000ff0000ffffff00ffffff00ffffff00ff00ff0000000000000000000000000
000ff0000000ff0000ffff0000ff00000f0ff0f0000000000000000000000000
000ff0000000f000000ff000000f00000f0000f0000000000000000000000000
